# Maximizing Go's Capabilities with the WebAssembly System Interface
21st March 2024
Tags: wasm, wasi, wasip1
Summary: This presentation examines the current state of WebAssembly in Go, with a focus on WASI preview 1. It delves into the history of WASI development, the ecosystem of tools, and explores real-world applications.

Rajiv Ranjan Singh
Achille Roussel

## Agenda

- **What are Go and WASI?**
- **History of WASI in Go**
- **How to use wasip1?**
- **The future of WASI in Go**

.image images/1.png 300 _

: We're so excited to be here with you to talk about Go and WASI.
: We'll delve into WASI and discuss a bit of the history about how WASI was added to Go.
: We will start the presentation with WebAssembly Architectures and the WebAssembly System Interface.
: We will then talk about Go and its ecosystem, and how WASI fits into the picture.
: We will cover a few use cases of WASI in Go applications today.
: And finally, we want to talk a bit about ongoing development in the space, and what are the next steps for Go and WASI to continue their journey together.

## Speaker - Rajiv Ranjan Singh

.link https://github.com/iamrajiv

- Software Engineer at **A.P. Moller - Maersk**
- Graduated in 2022 from **JSS Academy of Technical Education, Bengaluru, India**
- **Google Season of Docs** 2020 & 2021, **LFX Mentorship** 2021, and **Google Summer of Code** 2022
- Previously worked with **Lummo, redBus, and Economize**

: My name is Rajiv. I'm originally from Bihar, India, and currently work as a Software Engineer at A.P. Moller - Maersk in the Platform Engineering team in Bengaluru, India.
: I graduated in 2022 from JSS Academy of Technical Education, Bengaluru, India, with a degree in Information Science and Engineering.
: I started working with Go in 2020 when I was selected for Google Season of Docs with gRPC-Gateway.
: I am an open-source enthusiast and have contributed to various open-source projects and programs like Google Season of Docs, LFX Mentorship, and Google Summer of Code.
: I have previously worked with Lummo, redBus, and Economize.
: I'm here today with Achille, do you want to tell us a bit about yourself?

.image images/rajiv.png 250 _

## Speaker - Achille Roussel

.link https://github.com/achille-roussel

- Career at **Twitch, Facebook, Segment, Twilio**
- Go developer since 2014
- Go contributor since 2023 (**GOOS=wasip1**)
- Open-source maintainer on **wazero, ksuid, parquet-go...**
- Co-Founder of [**dispatch.run**](https://dispatch.run)

: My name is Achille. I'm originally from France, but I'm now based in San Francisco.
: I've been a Go developer for almost 10 years, and I started working on the Go compiler and runtime in 2023.
: I do a lot of open-source work, for example I contribute to Wazero and maintain serveral libraries.
: Last year, I joined the team that develops and maintains the WebAssembly port of Go.
: And I'm also the co-founder of dispatch.run, where we are working on a platform to create reliable distributed systems.

.image images/achille.png 200 _

## An open-source community journey

.image images/world.gif 500 _

: Rajiv and I come from very different places.
: We connected online in the Go community, and thought it would be nice to come and tell the stories of Go and WebAssembly to a broader audience.
: So, open-source is really core to the story we're here to tell.
: Not only because Go is powered by an open-source community, but also because it's thanks to this community that the work we are talking about today happened.

## WebAssembly Architectures

- Compact byte code as compilation target
- Virtual machines do compilation at run time
- Host functions for external communication

.image images/wasm-arch.png 400 _

: WebAssembly originally started as a browser technology.
: It is bytecode that is executed by a virtual machine, also referred to as the host or runtime.
: By default, WebAssembly is purely just memory and compute, but the runtime can expose functions for the guest module to import, those are called host functions.
: In recent years, standalone runtimes emerged like wazero, wasmtime, wasmer, or wasmedge.
: While these runtimes can be used as-is to run programs compiled to WebAssembly, they can also be embedded into existing applications.
: And this is a very powerful model.
: For example, you can write a plugin in Rust, compile it to WebAssembly, and embed it in a Go application.
: WebAssembly runtimes also offer fairly strong sandboxing, so in some case it even allows running modules from untrusted sources.
: However, for these capabilities to work, there needs to be common interfaces that all runtimes and compilers agree upon, and that's what the WebAssembly System Interface is.

## The WebAssembly System Interface (WASI)

.link https://wasi.dev/ wasi.dev

- WebAssembly host functions to expose system resources
- Current releases are preview 1 and preview 2

.image images/wasi-host-call.png 400 _

: So from now on, I'm going to abbreviate the WebAssembly System Interface as WASI.
: WASI defines the ABI that compilers can target to produce WebAssembly modules.
: And the runtimes implement WASI to provide access to system resources.
: In a way, it makes it possible to create very lightweight containers in user-space, without assistance from the kernel.
: For example, the host application can choose which environment variables or file system mount points are exposed to each instance of the modules.
: There are currently two released versions of WASI called preview 1 and preview 2, that are often referred to as wasip1 and wasip2.
: At this time, compilers that target WASI have mostly implemented preview 1.
: We're talking about fairly bleeding edge tech with a lot of active development in the space.

## Why is WASI important?

- Cross-compatibility between WebAssembly runtimes
- Specification for language compilers
- System resources are useful!

.image images/wasi-interface.png 200 _

: Like I was saying earlier, we need WASI because we need portable interfaces that compilers and runtimes can work with.
: If the only supported toolchain was the combination of one compiler and one runtime, there would be no point having a standard specification.
: Moreover, a specification for accessing system resources is important because these resources are important!
: Programs need files, sockets, clocks, environment variables.
: I mean, I don't know about you, but I find there isn't much useful software we can build without these primitives.
: So now that we have a sense of what's WASI, and why we need it. Rajiv, let's talk a bit more about Go.

## What is Go?

- Multi-paradigm programming language
- Maintained by Google as an open-source project

.image images/3.png 300 _

: So let's start with What is Go?
: Go is statically typed, compiled, and garbage-collected language. The development of Go started in 2007 at Google, and it was released to the public in 2009.
: Go is a multi-paradigm programming language oriented towards the needs of developing secure, production-quality applications.
: It is a language developed and maintained by Google as an open-source project.

## An example Go program

.code examples/main.go

- Simple syntax, easy to pick up
- Memory-safe with automated memory management
- Portable, compiles to a multitude of platforms

: But, instead of telling you a long story, let me show you an example.
: This is a full Go program that prints a hello message, as you can see it is quite simple.
: Even if you've never looked at a Go program before, you'll be able to make sense of the code.
: And this is a core value if Go, Go is easy to pick up.
: Go has a rich standard library, and advanced concurrency primitives built into the language like goroutines and channels.
: And it is also very portable, it compiles to a multitude of targets, including webassembly.

## Go is more than a language

The **go** program is the entrypoint to the Go toolchain.
It standardizes how developers build and maintain their applications.

```bash
$ go build
```

```bash
$ go mod
```

```bash
$ go fmt
```

```bash
$ go test
```

```bash
$ go tool pprof
```

: The go program is the entrypoint of the Go toolchain.
: It standardizes how developers build and maintain their applications.
: Here I have listed a few commands that I use in my day-to-day work with Go.
: As you can see, it provides a lot of standard tooling for building, managing dependencies, formatting and testing the code, but also some more advanced constructs like a builtin CPU and memory profiler.

## Go is also an ecosystem

- Many open-source projects are developed in Go
- Large portfolio of high-quality open-source libraries
- Alternate compilers like **TinyGo**
- **Wazero** as embedded WASI runtime

.image images/4.png 200 _

: But Go is a lot more than a language, it's an ecosystem of high-quality open-source tools and libraries that largely contribute to developer productivity.
: Beyond that, it's also a tool with a very wide breadth of applications.
: I'm mentioning all of this because when using Go, the entire toolchain is available when compiling to WebAssembly.
: So Achille, how about you tell us how WASI was developed in Go?

## History of WASI Support in the Go Toolchain

- WebAssembly support added in 2018 (Go 1.11)
- WASI preview 1 target added in 2023 (Go 1.21)

: Since a lot of you here are software developers, I'm sure you'll enjoy the story, in particular because you've probably lived through similar ventures before.
: WASM support was first added to Go 1.11 that shipped in 2018.
: But the WASI compilation target was released last year in Go 1.21.
: This is five years and ten versions appart.
: And that's because Go is for a big part developed by its community, and for a while, there weren't enough contributors available to work on WASI.
: That changed in January 2023, when Johan Brandhorst, posted a message on Gopher Slack asking if anyone was interested in forming a team to maintain the WebAssembly port of Go.

.image images/6.png 400 _

## Task #1: Learn the Craft

- 4 contributors

- 2 proposals
  - **go:wasmimport**

    The new compiler directive that would allow us to develop WASI

  - **GOOS=wasip1**

    The new target platform to implement the Go runtime on top of WASI

- 1 partial implementation

.image images/7.png 200 _

: My friend and co-founder Julien replied to the message, and a few days later, we had a little group of 4 team members ready to pick up the work.
: Imagine the situation: we had four engineers who had never worked together on the Go compiler or runtime, and we picked up an abandonned branch that was started a few years before to add WASI, but had massively diverged from upstream.
: Let me tell you, we weren't necessarily set on a path for success.
: Our task was first to split out the compiler from the runtime changes so we could submit individual proposals to the Go project and deliver incremental results.
: We submitted a first proposal to add a compiler primitive called go:wasmimport, which allows developers to declare go functions as host imports.
: And a second proposal to add a new compilation target for WASI preview 1 that we called wasip1.
: As a side note, we heard that more languages are adopting the term wasip1 and wasip2, I personally really enjoy this cross-language collaboration in the WebAssembly ecosystem.

## Task #2: Power Through

- Navigate the creativity of the open-source world.

.image images/8.png 300 _

: While we were going through the development of wasip1, a major challenge was dealing with the difference in interpretation of the WASI spec in various runtimes and languages.
: The alternative compiler TinyGo which is built on LLVM, had supported WASI for a few years already.
: Since TinyGo already supported it, I thought "great!" I could use the combination of TinyGo and Wasmtime as the reference.
: Little did I know, the file system implementation of WASI in TinyGo was only partially completed.
: So while we were working on getting wasip1 in "Big Go," I also took a side quest to finish the wasip1 implementation in TinyGo in order to have a reference that we could compare to.

## Task #3: Deliver the Product

- Changes started getting merged in
- More contributors joined to help push through the finish line

.image images/9.png 300 _

: Through the perseverance of the team, after a couple of months, we had the go:wasmimport directive merged in, which we could use to implement wasip1 support in the Go runtime.
: As we made progress on the wasip1 implementation, more developers tagged along to contribute improvements.
: At this stage, we also started getting a lot of support from the Go team, and it really felt like we were going to pull this off.
: Finally, the new wasip1 target went live in Go 1.21, which was released in September 2023.

## Task #4: Celebrate

.image images/10.png 400 _

: I want to take a minute to thank all the contributors who have participated in creating the wasip1 port of Go.
: There are too many people to fit on this slide, but if you're watching this talk, you know who you are, and know the amazing role you took in making this a reality.
: This is truly a team effort, from people who had mostly never met in person. To me, it is a great showcase of the power of open-source communities.
: Now, I'll head it over to Rajiv to tell us more about what we can do with WASI and Go.

## Using the go:wasmimport directive

.code examples/wasmimport.go

.image images/11.png 200 _

: We mentioned that the first addition was the compiler directive: go:wasmimport, and this is how we use it in Go.
: The program declares a Go function signature without the body of the function, preceeded with the directive declaring the names of the wasm module and the exported function that it links to.
: We can pass pointers into the linear program memory, and other primitive types, and the compiler takes care of the translation to webassembly types.
: As you can see, this is a fairly low-level directive, only library maintainers usually care to use it, and would expose higher level APIs that invoke the imports.

## Building Go program for wasip1

Simple two step process:
- go build with GOARCH=wasm and GOOS=wasip1
- run the compiled module with a WASI runtime

.code examples/main.go

    $ GOARCH=wasm GOOS=wasip1 go build -o main.wasm main.go
    $ wazero run main.wasm
    Hello wasip1!

: Now let's take a look at how we can build a Go program targeting wasip1.
: The GOARCH and GOOS environment variables are used to control the target platform, we set them to wasm and wasip1 to build a WASI module. It doesn't get much simpler than that to build a Go program for wasip1.
: In this program, the go:wasmimport directive is used underneath by the Go runtime to interact with the host.
: And when we run our program with a runtime like wazero, we see our message print to the console.

## Making Go plugins with wasip1

- Why is WASI useful for sqlc and its plugins?
  - Generate type-safe code from SQL queries
  - Generic code generator written in Go
  - Plugins targetting each language built with GOOS=wasip1

: There are many applications of wasip1, I selected this one because it highlights the plugin model of WebAssembly.
: So, WASI is currently primarily useful for writing plugins in any language that can be compiled to Wasm and WASI, and then executed in any language with a Wasm/WASI virtual machine.

: There is a project called https://github.com/sqlc-dev/sqlc which generates type-safe code from SQL. In this project, they need a differential plugin to make things happen, like sqlc-gen-go, sqlc-gen-kotlin, sqlc-gen-python, etc.
: So for every release, they extract the Go, Python, Kotlin, etc., codegen into standalone respective particular language plugins sqlc-gen-go, sqlc-gen-kotlin, sqlc-gen-python, etc., which are then built using wasip1.
: This allows people to customize the output by forking just the particular language plugin, not the entire sqlc repository.
: Go can be compiled both as a plugin and as a plugin runner (using Wazero, for example). In the case of sqlc, they can run plugins compiled to WASI, and then they can write their own plugins in Go and compile them to WASI.
: The reason for using wasip1 is that it's a much smaller amount of code to change to write plugins.

## Kube Scheduler Wasm Extension

- WebAssembly for Multi-language Compatibility
- Enhanced Kubernetes Scheduler
- Seamless Integration via Runtime Embedding

.image images/wasi-k8s.png 400 _

: WebAssembly enables the execution of code written in diverse languages within a secure environment. Its versatility allows developers to leverage existing codebases compiled to Wasm for various purposes.
: Integrating WebAssembly into the kube-scheduler empowers users to extend its functionality through custom plugins compiled to Wasm binaries. This approach enriches Kubernetes scheduling capabilities without necessitating changes to the core scheduler implementation.
: By embedding the WebAssembly runtime, wazero, directly into the scheduler, the process of incorporating custom plugins becomes streamlined. Configuration-based loading of these plugins further simplifies the customization process for users, fostering adaptability within Kubernetes deployments.

: Today, extending the kube-scheduler with the Scheduling Framework is possible, but it is non-trivial.
: Customizing the scheduler involves writing code in Go and navigating through a complicated build process.
: Once you've developed your scheduler, there's additional deployment and configuration work required to integrate it into your cluster.
: This is not a one-time task; it needs to be repeated with every cluster upgrade.

: This project alleviates that burden by enabling the default scheduler to load custom plugins compiled to WebAssembly (wasm).
: This eliminates the deployment challenges mentioned above.
: Additionally, it opens up the possibility for plugins to be written in languages other than Go.

: Now I'll head it over to Achille to tell us about the qualities and limitations of wasip1.

## Go wasip1 in a nutshell

- **Qualities**
  - Full language support
  - Non-blocking I/O
  - Concurrent scheduling

- **Limitations**
  - Single threaded
  - Limited socket support in WASI preview 1
  - No compiler directive to declare exported functions

- **Extensions**
  - [github.com/stealthrocket/net](https://github.com/stealthrocket/net)

: Go is a language with native concurrency built-in.
: When compiling to WASI, we use non-blocking file descriptors to integrate with the Go runtime and allow concurrent operations to make progress without blocking one another.
: This also integrates with other runtime features like timers.
: So we get access to very powerful programming tools when using Go with WASI.
: A notable absence in WASI preview 1 is a complete implementation of network sockets.
: Which limits support for key features of the Go standard library like HTTP clients and servers.
: However, WebAssembly runtimes such as Wasmer and WasmEdge have introduced networking extensions.
: Although these extensions are not integrated into Go, we can use third party libraries to leverage them.
: These libraries are also great examples of using the go:wasmimport directive to invoke host functions.

## When to use Go vs TinyGo when targetting WASI?

- **Go**
  - Preferred when portability is the main priority

- **TinyGo**
  - Targets that require small binary footprint
  - Experimental WASI features (wasip2)
  - Compilation with wasm-unknown

.image images/12.png 150 _

: So now we actually have two Go compilers that can target WASI, when should we use one or the other?
: The primary reason to use TinyGo is for the smaller binary size that it produces. If you're shipping code to a browser for example, this is something that matters a lot.
: Another reason is that it generally implements features ahead of Big Go. For example, TinyGo had support for WASI long before Go did.
: As a matter of fact, WASI preview 2 is already being implemented in TinyGo.
: Now TinyGo makes some trade offs, and won't support 100% of the Go standard library or tool chain.
: So if you need the full language and portability guarantees, this is when you should use the main Go compiler.

## The future of WASI in Go

Three main workstreams:

- **GOARCH=wasm32**

  [A new WebAssembly 32-bits architecture for Go](https://github.com/golang/go/issues/63131)

- **go:wasmexport**

  [To allow developers to declare custom exported functions](https://github.com/golang/go/issues/63131)

- **WASI preview 2**

  [TinyGo contributors are working on an experimental support for wasip2](https://github.com/tinygo-org/tinygo/pull/4027)

.image images/13.png 150 _

: To wrap it up, let's take a quick look at what's happening today in Go.
: At this time, two proposals have been accepted by the Go team and are being worked on.
: The current WebAssembly architecture in Go uses a 64-bits address space, even tho all WebAsssembly hosts assume 32-bits.
: This hybrid model complicates interactions with the host a lot, so we're working on addressing this in a new wasm32 compilation target.
: The second proposal we're working on intends to address one of the current limitations.
: We're adding a go:wasmexport compiler directive that would allow developers to declare Go functions that are exported in the compiled WebAssembly module.
: And finally, there is ongoing work to add WASI preview 2 to TinyGo, which is key to prepare for a potential wasip2 target in Go.
: Go is becoming a big player in the WASI ecosystem, and we're always looking for more friends to help out on this journey.
: So if you're inspired and want to get involved, use wasip1, join the Gopher Slack, and come talk to us.

: Thank You, and we're happy to take your questions.
